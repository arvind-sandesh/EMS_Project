@page "/deptlist"
@using WebApp.Shared
@using WebApp.Shared.Models
@inject HttpClient Http
@inject ILogger<WebApp.Client.Pages.Dept.DeptList> logger
@inject IJSRuntime Js
<h3>Department List</h3>
<NavLink href="deptcreate" class="btn btn-sm btn-primary"><i class="oi oi-plus"></i> Add</NavLink>
@if (deptList == null)
{
    <div class="spinner"></div>
}
else
{
    <h3>@recordCount</h3>
    <div class="table-fluid">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Department</th>
                    <th>Task</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dept in deptList)
                {
                    <tr>
                        <td>@dept.DepartmentId</td>
                        <td>@dept.DepartmentName</td>
                        <td>
                            <a class="btn btn-sm btn-success" href="dept/@dept.DepartmentId">Edit</a>&nbsp;
                            <button class="btn btn-sm btn-danger" @onclick="@(()=>delDept(dept.DepartmentId))">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    private Department[]? deptList;
    private string recordCount = "0";

    protected override async Task OnInitializedAsync()
    {
        await recordLoad();
    }
    private async Task recordLoad()
    {
        deptList = await Http.GetFromJsonAsync<Department[]>("emp/deptlist");

        if (deptList != null)
        {
            recordCount = "Total Department Records : " + deptList.Count().ToString();
        }
    }
    protected async Task delDept(int id)
    {
        bool confirmed = await Js.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            HttpResponseMessage res = await Http.DeleteAsync("emp/dept/" + id);
            logger.LogInformation(res.ToString());
            if (res.StatusCode == System.Net.HttpStatusCode.OK)
            {
                await recordLoad();
            }
        }
    }

}
